{"version":3,"sources":["store/actions/actions.js","components/Link/link.js","containers/FilterLink/FilterLink.js","components/Footer/footer.js","containers/AddTodo/AddTodo.js","components/Todo/todo.js","components/Todolist/todolist.js","containers/VisibleTodoList/VisibleTodoList.js","App.js","store/reducers/reducers.js","store/store.js","index.js"],"names":["VisibilityFilters","nextTodoId","Link","active","children","onClick","disabled","style","marginleft","connect","state","ownProps","filter","visibilityFilter","dispatch","type","Footer","FilterLink","input","onSubmit","e","text","preventDefault","value","trim","id","ref","node","Todo","completed","textDecoration","Todolist","todos","toggleTodo","map","todo","getVisibleTodos","t","Error","App","VisibleTodoList","todoApp","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df6cfb0f.chunk.js","sourcesContent":["/*\r\n * типы экшенов\r\n */\r\n\r\nexport const ADD_TODO = 'ADD_TODO'\r\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\r\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'\r\n\r\n/*\r\n * другие константы\r\n */\r\n\r\n// const NOMINAL = [\"USD\", \"SOM\", \"SYM\"];\r\n\r\nexport const VisibilityFilters = {\r\n    SHOW_ALL: 'SHOW_ALL',\r\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\r\n    SHOW_ACTIVE: 'SHOW_ACTIVE'\r\n}\r\n\r\n/*\r\n * генераторы экшенов\r\n */\r\n\r\nlet nextTodoId = 0\r\nexport const addTodo = text => ({\r\n    type: ADD_TODO,\r\n    id: nextTodoId++,\r\n    text: text\r\n})\r\n\r\nexport const setVisibilityFilter = filter => ({\r\n    type: SET_VISIBILITY_FILTER,\r\n    filter\r\n})\r\n\r\nexport const toggleTodo = id => ({\r\n    type: TOGGLE_TODO,\r\n    id: id\r\n})","const Link = ({ active, children, onClick }) => (\r\n    <button\r\n        onClick={onClick}\r\n        disabled={active}\r\n        style={{\r\n            marginleft: '4px'\r\n        }}\r\n    >\r\n        {children}\r\n    </button>\r\n)\r\n\r\nexport default Link;","import { connect } from \"react-redux\";\r\nimport { setVisibilityFilter } from \"../../store/actions/actions\";\r\nimport Link from \"../../components/Link/link\";\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        active: ownProps.filter === state.visibilityFilter\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onClick: () => {\r\n            dispatch(setVisibilityFilter(ownProps.filter))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Link);","import FilterLink from '../../containers/FilterLink/FilterLink'\r\nimport { VisibilityFilters } from '../../store/actions/actions'\r\n\r\nconst Footer = () => (\r\n    <div>\r\n        <span>Show: </span>\r\n        <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\r\n        <FilterLink filter={VisibilityFilters.SHOW_ACTIVE} >Active</FilterLink>\r\n        <FilterLink filter={VisibilityFilters.SHOW_COMPLETED} >Completed</FilterLink>\r\n    </div>\r\n)\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../../store/actions/actions';\r\n\r\nlet AddTodo = ({dispatch}) => { \r\n    let input; //ozgormo \r\n\r\n    return (\r\n        <div>\r\n            <form\r\n            onSubmit={e => {\r\n                e.preventDefault()\r\n                if (!input.value.trim()) {\r\n                    return\r\n                }\r\n                dispatch(addTodo(input.value))\r\n                input.value = ''\r\n            }}\r\n        >\r\n                <input ref={node => (input = node)} />\r\n                <button type=\"submit\">Add Todo</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(AddTodo);","import React from 'react';\r\n\r\nconst Todo = ({ onClick, completed, text }) => (\r\n    <li\r\n    onClick = {onClick}\r\n    style = {{\r\n        textDecoration: completed ? 'line-through':'none'\r\n    }}\r\n    > {/* li ichinde text kelip atat */}\r\n        {text}\r\n    </li>\r\n)\r\n\r\nexport default Todo;","import Todo from \"../Todo/todo\";\r\n\r\nconst Todolist = ({todos, toggleTodo}) => (\r\n    <ul>\r\n        {todos.map(todo => ( //map menen generation bolup atat, kelgen todo-lardy render kylyp atat.  C:Todo\r\n            <Todo key={todo.id}\r\n            {...todo} //text-ter kelip atat\r\n            onClick={() => toggleTodo(todo.id)}\r\n            />\r\n        ))}\r\n    </ul>\r\n)\r\n\r\nexport default Todolist;","import { connect } from \"react-redux\";\r\nimport { toggleTodo } from \"../../store/actions/actions\";\r\nimport Todolist from \"../../components/Todolist/todolist\";\r\nimport { VisibilityFilters } from \"../../store/actions/actions\";\r\n\r\nconst getVisibleTodos = (todos, filter) => {\r\n    switch (filter) {\r\n        case VisibilityFilters.SHOW_ALL:\r\n            return todos\r\n        case VisibilityFilters.SHOW_COMPLETED:\r\n            return todos.filter(t => t.completed)\r\n        case VisibilityFilters.SHOW_ACTIVE:\r\n            return todos.filter(t => !t.completed)\r\n        default:\r\n            throw new Error('Unknown filter: '+ filter)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleTodo: id => dispatch(toggleTodo(id))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Todolist)","import './App.css';\n// import { storeTesting } from './store/storeTesting/storeTesting'\n\n\nimport Footer from './components/Footer/footer'\nimport AddTodo from './containers/AddTodo/AddTodo'\nimport VisibleTodoList from './containers/VisibleTodoList/VisibleTodoList'\n\nexport default function App() {\n    //uncomment for testing\n    // storeTesting();\n    return (\n        <div>\n            <AddTodo />\n            <VisibleTodoList />\n            <Footer />\n        </div>\n    )\n\n}","import { combineReducers } from \"redux\";\r\nimport {\r\n    ADD_TODO,\r\n    TOGGLE_TODO,\r\n    SET_VISIBILITY_FILTER,\r\n    VisibilityFilters\r\n} from '../actions/actions';\r\n\r\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\r\n    switch (action.type) {\r\n        case 'SET_VISIBILITY_FILTER':\r\n            return action.filter\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst todos = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'ADD_TODO':\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: action.id,\r\n                    text: action.text,\r\n                    completed: false\r\n                }\r\n            ]\r\n          case 'TOGGLE_TODO':\r\n            return state.map(todo => \r\n                todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n            )\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst todoApp = combineReducers({\r\n    visibilityFilter,\r\n    todos\r\n})\r\n\r\nexport default todoApp\r\n\r\n\r\n\r\n/*\r\n    _____ OUR STATE _____\r\n\r\n{\r\n  visibilityFilter: 'SHOW_ALL',\r\n  todos: [\r\n    {\r\n      text: 'Consider using Redux',\r\n      completed: true,\r\n    },\r\n    {\r\n      text: 'Keep all state in a single tree',\r\n      completed: false\r\n    }\r\n  ]\r\n}\r\n*/\r\n\r\n\r\n\r\n// const initialState = {\r\n//     visibilityFilter: VisibilityFilters.SHOW_ALL,\r\n//     todos: [\r\n//         {\r\n//             text: 'init',\r\n//             completed: true\r\n//         }\r\n//     ]\r\n// }\r\n\r\n\r\n\r\n/* export default function todoApp(state = {}, action) {\r\n    return {\r\n        visibilityFilter: visibilityFilter(state.visibilityFilter, action),\r\n        todos: todos(state.todos, action)\r\n    }\r\n} */\r\n\r\n\r\n\r\n/* function todoApp(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_VISIBILITY_FILTER:\r\n            return Object.assign({}, state, {\r\n                visibilityFilter: action.filter\r\n            })\r\n        case ADD_TODO:\r\n            return Object.assign({}, state, {\r\n                todos: todos(state.todos, action)\r\n            })\r\n        case TOGGLE_TODO:\r\n            return Object.assign({}, state, {\r\n                todos: todos(state.todos, action)\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n} */\r\n\r\n\r\n\r\n/* Это называется композицией редюсеров и является фундаментальным шаблоном построения Redux-приложений. */\r\n/* function todos(state = [], action) {\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n            return [\r\n                ...state,\r\n                {\r\n                    text: action.text,\r\n                    completed: false\r\n                }\r\n            ]\r\n        case TOGGLE_TODO:\r\n            return state.todos.map((todo, index) => {\r\n                if (index === action.index) {\r\n                    return Object.assign({}, todo, {\r\n                        completed: !todo.completed,\r\n                    })\r\n                }\r\n\r\n                return todo;\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n} */\r\n\r\n\r\n\r\n/* function todoApp(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_VISIBILITY_FILTER:\r\n            return Object.assign({}, state, {\r\n                visibilityFilter: action.filter\r\n            })\r\n        case ADD_TODO :\r\n            return Object.assign({}, state, {\r\n                todos: [\r\n                    ...state.todos,\r\n                    {\r\n                        text: action.text,\r\n                        completed: false\r\n                    }\r\n                ]\r\n            })\r\n        case TOGGLE_TODO :\r\n            return Object.assign({}, state, {\r\n                todo: state.todos.map((todo, index) => {\r\n                    if (index === action.index) {\r\n                        return Object.assign({}, todo, {\r\n                            completed: !todo.completed,\r\n                        })\r\n                    }\r\n\r\n                    return todo;\r\n                })\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n} */\r\n\r\n\r\n\r\n/* function todoApp(state = initialState, action) {\r\n    // Пока не обрабатываем никаких экшенов\r\n    // и просто возвращаем состояние, которое приняли в качестве параметра\r\n    return state\r\n} */\r\n\r\n\r\n\r\n/* function todoApp(state, action) {\r\n    if (typeof state === 'undefined') {\r\n        return initialState\r\n    }\r\n\r\n    // Пока не обрабатываем никаких экшенов\r\n    // и просто возвращаем состояние, которое приняли в качестве параметра\r\n    return state\r\n} */","import { createStore } from \"redux\";\r\nimport todoApp from \"./reducers/reducers\";\r\n\r\n/* Дүкөн - бул бөлүктөрдү бириктирүүчү объект. Дүкөн төмөнкү милдеттерди аткарат:\r\n\r\nөтүнмөнүн абалын камтыйт;\r\ngetState () аркылуу мамлекетке кирүүнү камсыз кылат;\r\nдиспетчерлик (аракет) аркылуу абалды жаңыртуу мүмкүнчүлүгүн камсыз кылат;\r\nЖазылуу (угуучу) тарабынан кайтарылган функцияны колдонуп, каттоодон чыгарылган угуучуларды иштетет.\r\n\r\n\r\nБелгилей кетчү нерсе, Redux тиркемесинде бир гана дүкөнүңүз болот. E\r\nЭгерде сиз маалыматтарды иштетүү логикасын бөлгүңүз келсе, анда редуктордун курамын колдонууңуз керек болот\r\nбир нече дүкөндөрдү колдонуунун ордуна.\r\n\r\nЭгер редукторуңуз болсо, Дүкөндү түзүү абдан оңой.\r\nБиз бир нече редукторду бир глобалдык редукторго бириктирүү үчүн CombineReducers () колдондук.\r\nЭми биз аларды импорттоп, createStore () өткөрүп беребиз.\r\n */\r\n\r\nexport let store = createStore(todoApp); /* chakyrylat createStore ititilation bolot */","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}